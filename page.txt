"Java  \n\nКласс языка\n\nмультипарадигмальный язык программирования,&#32;язык JVM[d]&#32;и&#32;язык программирования\n\n\nПоявился в\n\n23 мая 1995\n\n\nАвтор\n\nДжеймс Гослинг&#32;и&#32;Sun Microsystems\n\n\nРазработчик\n\nSun Microsystems&#32;и&#32;Oracle\n\n\nРасширение файлов\n\n.java,&#32;.class или .jar\n\n\nВыпуск\n\nJava Standard Edition 10&#91;1&#93;\n\n\nИспытал влияние\n\nC++,&#32;Си,&#32;Ада,&#32;Simula 67[d&#x5d;,&#32;Smalltalk,&#32;Objective-C,&#32;Object Pascal,&#32;Оберон,&#32;Eiffel,&#32;Модула-3,&#32;Mesa[d&#x5d;,&#32;Симула,&#32;C#,&#32;UCSD Pascal,&#32;обёртка,&#32;Вариативная функция,&#32;аннотация Java,&#32;Никлаус Вирт,&#32;Patrick Naughton[d]&#32;и&#32;foreach[d&#x5d;\n\n\nЛицензия\n\nGNU GPL&#32;и&#32;Java Community Process\n\n\nСайт\n\njava.com&#8203;&#160;(англ.)\n\n\nЭта статья&#160;— о&#160;языке программирования. О&#160;прикладной платформе на основе данного языка см.&#160;Java (программная платформа).\nJava&#91;прим. 1&#93;&#160;— строго типизированный объектно-ориентированный язык программирования, разработанный компанией Sun Microsystems (в последующем приобретённой компанией Oracle). Разработка ведётся сообществом, организованным через Java Community Process, язык и основные реализующие его технологии распространяются по лицензии GPL. Права на торговую марку принадлежат корпорации Oracle.\nПриложения Java обычно транслируются в специальный байт-код, поэтому они могут работать на любой компьютерной архитектуре, для которой существует реализация виртуальной Java-машины. Дата официального выпуска&#160;— 23 мая 1995 года. На 2019 год Java&#160;— один из самых популярных языков программирования&#91;2&#93;&#91;3&#93;.\n\nСодержание\n\n1 История создания\n2 Основные особенности языка\n3 История версий\n\n3.1 JDK 1.0\n3.2 JDK 1.1\n3.3 J2SE 1.2\n3.4 J2SE 1.3\n3.5 J2SE 1.4\n3.6 J2SE 5.0\n3.7 Java SE 6\n3.8 Java FX\n3.9 Java ME Embedded\n3.10 Java SE 7\n\n3.10.1 Список нововведений\n\n\n3.11 Java SE 8\n\n3.11.1 Список нововведений\n\n\n3.12 Java SE 9\n\n3.12.1 Список нововведений\n\n\n3.13 Java SE 10\n\n3.13.1 Список нововведений\n\n\n3.14 Java SE 11\n\n3.14.1 Список нововведений\n\n\n\n\n4 Классификация платформ Java\n5 Java и Microsoft\n6 Java и Android\n7 Применения платформы Java\n\n7.1 Производительность\n\n\n8 Основные возможности\n9 Основные идеи\n\n9.1 Примитивные типы\n\n9.1.1 Преобразования при математических операциях\n\n\n9.2 Объектные переменные, объекты, ссылки и указатели\n\n9.2.1 Дублирование ссылок и клонирование\n9.2.2 Инициализация переменных\n9.2.3 Сборка мусора\n\n\n9.3 Классы и функции\n\n9.3.1 Конструкторы\n9.3.2 Статические методы и поля\n9.3.3 Завершённость (final)\n9.3.4 Абстрактность\n9.3.5 Интерфейсы\n\n9.3.5.1 Маркерные интерфейсы\n\n\n9.3.6 Шаблоны в Java (generics)\n9.3.7 Проверка принадлежности к классу\n\n\n9.4 Обработка ошибок\n9.5 Пространство имён\n\n\n10 Примеры программ\n11 Средства разработки ПО\n12 См. также\n13 Примечания\n\n13.1 Комментарии\n13.2 Документация\n13.3 Источники\n\n\n14 Литература\n15 Ссылки\n\n\n\nИстория создания\nИзначально язык назывался Oak («Дуб»), разрабатывался Джеймсом Гослингом для программирования бытовых электронных устройств. Из-за того, что язык с таким названием уже существовал, вскоре Oak был переименован в Java&#91;4&#93;. Назван в честь марки кофе Java, которая, в свою очередь, получила наименование одноимённого острова (Ява), поэтому на официальной эмблеме языка изображена чашка с горячим кофе. Существует и другая версия происхождения названия языка, связанная с аллюзией на кофе-машину как пример бытового устройства, для программирования которого изначально язык создавался. В соответствии с этимологией в русскоязычной литературе с конца двадцатого и до первых лет двадцать первого века название языка нередко переводилось как Ява, а не транскрибировалось.\nВ результате работы проекта мир увидел принципиально новое устройство, которое опередило своё время более чем на 10 лет. Устройство получило название Star7, но из-за большой стоимости в 50 долларов не смогло произвести переворот в мире технологии и постепенно забылось.\nStar7 не пользовался популярностью в отличие от языка программирования Java и его окружения. Следующим этапом жизни языка стала разработка интерактивного телевидения. В 1994 году стало очевидным, что интерактивное телевидение было ошибкой.\nС середины 1990-х годов язык стал широко использоваться для написания клиентских приложений и серверного программного обеспечения. Тогда же определённое распространение получила технология Java-апплетов&#160;— графических Java-приложений, встраиваемых в веб-страницы; с развитием возможностей динамических веб-страниц в 2000-е годы технология стала применяться редко.\n\nОсновные особенности языка\nПрограммы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM)&#160;— программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.\n\n  Дюк — талисман Java\nДостоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание.\nЧасто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java:\n\nприменение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде,\nобширное использование платформенно-ориентированного кода (native-код) в стандартных библиотеках,\nаппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM).\nПо данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее&#91;5&#93;. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++&#91;6&#93;&#91;7&#93;&#91;8&#93;.\nИдеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине&#91;9&#93;. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.\n\nИстория версий\nОсновная статья: История версий Java\nJDK 1.0\nРазработка Java началась в 1990 году, первая официальная версия&#160;— Java 1.0,&#160;— была выпущена только 21 января 1996 года.\n\nJDK 1.1\nВторая версия была выпущена 19 февраля 1997 года&#91;10&#93;.\n\nБиблиотека Accessibility.\nJava 2D.\nПоддержка технологии drag-and-drop.\nПолная поддержка Unicode, включая поддержку ввода на японском, китайском и корейском языках.\nПоддержка воспроизведения аудиофайлов нескольких популярных форматов.\nПолная поддержка технологии CORBA.\nJIT-компилятор, улучшенная производительность.\nУсовершенствования инструментальных средств JDK, в том числе поддержка профилирования Java-программ.\nJ2SE 1.2\nДата выпуска 8 декабря 1998 года&#91;11&#93;. Кодовое имя Playground.\nВ данном случае встречается путаница. Выпускались книги, например, Beginning Java 2 by Ivor Horton (Mar 1999), фактически по J2SE 1.2 (бывшее название&#160;— Java 2). Вместе с тем по сей день такие книги публикуются, например: Х.&#160;М.&#160;Дейтел, П. Дж. Дейтел, С.&#160;И.&#160;Сантри. Технологии программирования на Java 2. Распределённые приложения (2011).\nВ то время, когда, как известно, Java 2 была исторически заменена следующими релизами, подобные названия книг дезориентируют в понимании, о какой же версии Java они написаны на самом деле. Если J2SE 1.2 принято считать за Java 2, а авторы книг за Java 2 принимают JDK 7, это приводит к полной путанице.\n\nJ2SE 1.3\nДата выпуска 8 мая 2000 года. Кодовое имя Kestrel.\n\nJ2SE 1.4\nДата выпуска 6 февраля 2002 года. Кодовое имя Merlin.\n\nJ2SE 5.0\nСпецификация Java 5.0 была выпущена 30 сентября 2004 года, кодовое имя Tiger. C этой версии изменена официальная индексация, вместо Java 1.5 правильнее называть Java 5.0. Внутренняя же индексация Sun осталась прежней&#160;— 1.x. Минорные изменения теперь включаются без изменения индексации, для этого используется слово «Update» или буква «u», например, Java Development Kit 5.0 Update 22. Предполагается, что в обновления могут входить как исправления ошибок, так и небольшие добавления в API, JVM.\nВ данной версии разработчики внесли в язык целый ряд принципиальных дополнений:\n\nПеречислимые типы (англ.&#160;enum). Ранее отсутствовавшие в Java типы оформлены по аналогии с C++, но при этом имеют ряд дополнительных возможностей.\nПеречислимый тип является полноценным классом Java, то есть может иметь конструктор, поля, методы, в том числе скрытые и абстрактные.\nПеречисление может реализовывать интерфейсы.\nДля перечислений имеются встроенные методы, дающие возможность получения значений типа по имени, символьных значений, соответствующих именам, преобразования между номером и значением, проверки типа на то, что он является перечислимым.\nАннотации&#160;— возможность добавления в текст программы метаданных, непосредственно не влияющих на выполнение кода, но допускающих использование для получения различных сведений о коде и его исполнении. Одновременно выпущен инструментарий для использования аннотированного кода. Одно из применений аннотаций&#160;— упрощение создания тестовых модулей для Java-кода.\nСредства обобщённого программирования (англ.&#160;generics)&#160;— механизм, аналогичный средствам языков Ada&#91;12&#93; и Eiffel (позже также появились и в C#, принципиально отличаются от шаблонов C++), дающий возможность создавать классы и методы с полями и параметрами произвольного объектного типа. С использованием данного механизма реализованы новые версии коллекций стандартной библиотеки Java.\nМетоды с неопределённым числом параметров.\nAutoboxing/Unboxing&#160;— автоматическое преобразование между скалярными типами Java и соответствующими типами-обёртками (например, между int&#160;— Integer). Наличие такой возможности сокращает код, поскольку исключает необходимость выполнения явных преобразований типов в очевидных случаях.\nРазрешён импорт статических полей и методов.\nВ язык введён цикл по коллекции объектов (итератор, англ.&#160;foreach).\nБыло введено использование Javadoc-комментариев, которые используются для автоматического оформления документации по комментариям в исходном коде.\nJava SE 6\nРелиз версии состоялся 11 декабря 2006 года, кодовое имя Mustang. Изменена официальная индексация&#160;— вместо ожидаемой 6.0 версия значится как 6. Минорные изменения, как и в Java 5.0, вносятся в обычные обновления версии, например, Java Standard Edition Development Kit 6 Update 27. Внесены следующие изменения:\n\nКоллекции&#160;— добавлены интерфейсы для организации очереди, работающей с двух сторон коллекции; организовывающие поиск по ближайшему соответствию; блокирующие себя во время ожидания элемента. Организованы новые классы, реализующие перечисленные интерфейсы.\nДобавлена поддержка японского императорского календаря (наряду с уже существующими григорианским и буддийским календарями).\nДоступны классы-потоки для чтения и передачи сжатых данных, с возможностью передачи их по сети. Сняты ограничения на количество файлов в архиве (ранее 64 Кб), длину названия файла (ранее 256 символов) и количество одновременно открытых файлов (ранее 2000 шт).\nОрганизована система управления кэшем и добавлена поддержка параметра «no-cache» в HTTP-запросе.\nJConsole, графический мониторинг JVM, стала официально поддерживаемой утилитой.\nJava HTTP Server, позволяет создать полноценный HTTP-сервер, с минимально необходимыми функциональными свойствами.\nПовысилась скорость вычислений на 70&#160;%, скорость операций ввода-вывода возросла в два раза&#91;13&#93;.\nSwing&#160;— улучшена работоспособность OpenGL и DirectX; обработка текста на LCD; добавлен GifWriter, для работы с файлами формата GIF.\nИсправлено большое количество ошибок.\nJava FX\nДата выпуска 8 октября 2013 года.\nJavaFX 2.2 вошёл в состав Java SE 7 update 6&#91;14&#93;. С 11-й версии модуль поставляется отдельно от JDK&#91;15&#93;.\n\nJava ME Embedded\nДата выпуска 10 октября 2013 года. Кодовое имя Micro Edition.\n\nJava SE 7\nРелиз версии состоялся 28 июля 2011 года, кодовое имя Dolphin&#91;16&#93;. В финальную версию Java Standard Edition 7 не были включены все ранее запланированные изменения. Согласно плану развития (план «Б»)&#91;17&#93;, включение нововведений будет разбито на две части: Java Standard Edition 7 (без лямбда-исчисления, проекта Jigsaw, и части улучшений проекта Coin&#91;18&#93;) и Java Standard Edition 8 (все остальное), намеченный на конец 2012 года.\nВ новой версии, получившей название Java Standard Edition 7 (Java Platform, Standard Edition 7), помимо исправления большого количества ошибок, было представлено несколько новшеств. Так, например, в качестве эталонной реализации Java Standard Edition 7 использован не проприетарный пакет JDK, а его открытая реализация OpenJDK, а сам релиз новой версии платформы готовился при тесном сотрудничестве инженеров Oracle с участниками мировой экосистемы Java, комитетом JCP (Java Community Process) и сообществом OpenJDK. Все поставляемые Oracle бинарные файлы эталонной реализации Java Standard Edition 7 собраны на основе кодовой базы OpenJDK, сама эталонная реализация полностью открыта под лицензией GPLv2 с исключениями GNU ClassPath, разрешающими динамическое связывание с проприетарными продуктами. К другим нововведениям относится интеграция набора небольших языковых улучшений Java, развиваемых в рамках проекта Coin, добавлена поддержка языков программирования с динамической типизацией, таких, как Ruby, Python и JavaScript, поддержка загрузки классов по URL, обновлённый XML-стек, включающий JAXP 1.4, JAXB 2.2a и JAX-WS 2.2 и другие&#91;19&#93;.\nЗа 5 дней до выхода релиза Java Standard Edition 7 было обнаружено несколько серьёзных ошибок в горячей оптимизации циклов, которая включена по умолчанию и приводит виртуальную машину Java к краху. Специалисты Oracle найденные ошибки за столь короткий срок исправить не могли, но пообещали, что они будут исправлены во втором обновлении (Java 7 Update 2) и частично в первом&#91;20&#93;.\n\nСписок нововведений\nПоддержка динамически-типизированных языков (InvokeDynamic)&#160;— расширение JVM (семантики байт-кода), языка Java&#91;21&#93; для поддержки динамически-типизированных языков.\nСтрогая проверка class-файлов&#160;— class-файлы версии 51 (Java Standard Edition 7) или более поздней версии должны быть проверены typechecking-верификатором; JVM не должна переключаться на старый верификатор.\nИзменение синтаксиса языка Java (Project Coin)&#160;— частичные изменения в языке Java, предназначенные для упрощения общих задач программирования:\nИспользование класса String&#91;док. 1&#93; в блоке switch.\nЗакрытие используемых ресурсов в блоке try (try-with-resources)&#160;— работает при использовании интерфейса AutoClosable&#91;док. 2&#93;.\nОбъединённая обработка исключений в блоке catch (multi-catch exceptions)&#160;— перечисление обрабатываемых исключений в catch (… | … | …).\nПовторное выбрасывание исключений (rethrowing exceptions)&#160;— передача возникшего исключения «вверх» по стеку вызовов.\nПодчёркивания в числовых литералах для лучшего восприятия больших чисел.\nИзменение вывода типа в Java generic при создании объекта.\nИспользование двоичных чисел (binary literals)&#160;— префикс 0b укажет, что используется двоичное число.\nУпрощение вызова методов varargs&#160;— уменьшение предупреждений при вызове метода с переменным числом входящих переменных.\nМодификация загрузчика классов (class-loader)&#160;— избежание тупиковых ситуаций в неиерархической топологии загрузки классов.\nЗакрытие ресурсов, открытых URLClassLoader&#91;док. 3&#93;.\nОбновление коллекций (JSR 166).\nПоддержка Unicode 6.0.\nОтделение языка пользователя и языка пользовательского интерфейса&#160;— обновление обработки языков для отделения локали от языка пользовательского интерфейса.\nНовые интерфейсы I/O для платформы Java (nio.2).\nИспользование JDBC 4.1 и Rowset 1.1.\n… (не закончено)\nJava SE 8\nРелиз версии состоялся 19 марта 2014 года. Кодовое имя Octopus.\n\nСписок нововведений\nПолноценная поддержка лямбда-выражений.\nКлючевое слово default в интерфейсах для поддержки функциональности по умолчанию.\nСтатические методы в интерфейсах.\nСсылки на методы и конструкторы&#91;22&#93;&#91;23&#93;.\nФункциональные интерфейсы (предикаты, поставщики и&#160;т.&#160;д.)\nПотоки (stream) для работы с коллекциями.\nНовый API для работы с датами.\n… (не закончено)\nJava SE 9\nВ связи со сложностями в реализации модульной системы в рамках проекта Jigsaw, релиз версии, первоначально запланированный 22 сентября 2016 года, несколько раз откладывался: сначала дата была перенесена на 23 марта 2017 года, потом&#160;— на 27 июля 2017 года, а затем&#160;— на 21 сентября 2017 года&#91;24&#93;&#91;25&#93;&#91;26&#93;.\nПоследняя дата стала официальной датой релиза версии&#91;27&#93;.\n\nСписок нововведений\nИнтеграция Jigsaw, в рамках которого разработана модульная система для платформы Java 9 и применена к JDK 9&#91;28&#93;.\nОбновление Process API для улучшения взаимодействия с процессами операционной системы. Обновление мотивировано тем, что разработчикам зачастую приходилось писать платформозависимый код для таких задач&#91;29&#93;.\nВременно экспериментальный&#91;30&#93;&#91;31&#93; новый HTTP-клиент с поддержкой HTTP/2 и веб-сокетов; предназначен заменить устаревший класс HttpURLConnection&#91;док. 4&#93;&#91;30&#93;.\nСжатые строки: если содержимое строки позволяет, она может кодироваться в Latin-1 (один байт на символ); выбор кодировки конкретного экземпляра класса String отображается в значении переменной-флага, которая теперь есть у всех строк.&#91;32&#93;\nПоддержка указанных в NIST FIPS 202 алгоритмов хеширования SHA-3, кроме SHAKE128 и SHAKE256. Алгоритмы использования SHA-3 в качестве основы для других криптографических функций не реализованы в силу отсутствия соответствующих стандартов&#91;33&#93;.\nУлучшены средства для пометки устаревшего API. В аннотацию @Deprecated добавлен параметр, позволяющий указывать версию программы, с которой использование отмеченного элемента не рекомендуется, а также&#160;— параметр, позволяющий указать, что запланировано удаление элемента в какой-либо из будущих версий&#91;34&#93;.\nПоддержка GTK+ 3 на Linux&#91;35&#93;.\nJava SE 10\nДата релиза: 20 марта 2018 года.&#91;36&#93;\n\nСписок нововведений\nОфициальный частичный список нововведений и план релиза расположен на сайте OpenJDK.\n\nВывод типов локальных переменных, помеченных с помощью ключевого слова var&#91;37&#93;.\nСоздание прозрачного интерфейса сборщика мусора для упрощения разработки новых сборщиков&#91;38&#93;.\nУменьшено время задержек многопоточного сборщика мусора G1 за счёт реализации параллельного полного цикла сборки мусора&#91;39&#93;.\nВозможность выполнять функции обратного вызова на потоках, не делая глобальных блокировок&#91;40&#93; в рамках всех потоков&#91;41&#93;.\nПоддержка символов из новых расширений Unicode: cu (тип валюты), fw (первый день недели), rg (двухбуквенные коды стран и регионов), tz (часовой пояс)&#91;42&#93;.\nHotSpot VM теперь может выделять память кучи для объектов на альтернативных устройствах оперативной памяти, в том числе тех, которые обладают энергонезависимой памятью, как, например, накопители Intel Optane Memory&#91;43&#93;.\nНовый экспериментальный JIT-компилятор Graal, предоставляющий возможности Ahead-of-Time компиляции; по умолчанию отключён, работает только на Linux/x64&#91;44&#93;.\nОбновление системы нумерации версий Java SE и JDK с целью приближения к схеме управления версиями по времени&#91;45&#93;.\nJava SE 11\nОфициальный частичный список нововведений и план релиза расположен на сайте OpenJDK. Дата&#160;релиза&#160;— 25 сентября 2018 года.\n\nСписок нововведений\nОбновление системы управления доступом, позволяющее вложенным классам обращаться к закрытым (private) методам и полям внешнего класса (и наоборот) без необходимости создания компилятором промежуточных методов с повышением уровня доступа&#91;46&#93;.\nEpsilon&#160;— новый сборщик мусора, собственно сборкой мусора не занимающийся вообще; при использовании Epsilon превышение предела выделяемой памяти приводит к завершении работы JVM&#91;47&#93;.\nСтандартизирован клиент HTTP с поддержкой HTTP/2, введённый в Java 9 как экспериментальный&#91;48&#93;.\nПараметры лямбда-функций могут быть неявно типизированы путём вывода типов через ключевое слово (var) для унификации с синтаксисом локальных переменных, введённым в JDK 10&#91;49&#93;.\nПоддержка 10-й версии стандарта Unicode&#91;50&#93;.\nПоддержка протокола TLS 1.3&#91;51&#93;.\nЭкспериментальный масштабируемый сборщик мусора ZGC с низкими задержками. По умолчанию отключён, работает только на Linux/x64&#91;52&#93;.\nКлассификация платформ Java\nВнутри Java существует несколько основных семейств технологий:\n\nJava SE&#160;— Java Standard Edition, основное издание Java, содержит компиляторы, API, Java Runtime Environment; подходит для создания пользовательских приложений, в первую очередь&#160;— для настольных систем.\nJava EE&#160;— Java Enterprise Edition, представляет собой набор спецификаций для создания программного обеспечения уровня предприятия. В 2017-м проект Java EE был передан Eclipse Foundation&#91;53&#93;, после чего был переименован в Jakarta EE&#91;54&#93;. Модули Java EE удалены из Java SE, начиная с 11-й версии&#91;55&#93;.\nJava ME&#160;— Java Micro Edition, создана для использования в устройствах, ограниченных по вычислительной мощности, например, в мобильных телефонах, КПК, встроенных системах;\nJava Card&#160;— технология предоставляет безопасную среду для приложений, работающих на смарт-картах и других устройствах с очень ограниченным объёмом памяти и возможностями обработки.\nJava и Microsoft\nКомпанией Microsoft была разработана собственная реализация JVM под названием Microsoft Java Virtual Machine&#160;(англ.)русск. (MSJVM)&#91;56&#93;, включавшаяся в состав различных операционных систем, начиная с Windows 98 (также входила в Internet Explorer от версии 3 и выше, что позволяло использовать MSJVM в ОС Windows 95 и Windows NT 4 после установки IE3+ на данные ОС).\nMSJVM имела существенные отличия от Sun Java, во многом ломающие основополагающую концепцию переносимости программ между разными платформами:\n\nотсутствие поддержки программного интерфейса вызова удалённых методов (RMI);\nотсутствие поддержки технологии JNI;\nналичие нестандартных расширений, таких, как средства интеграции Java и DCOM, работающих только на платформе Windows.\nТесная интеграция Java с DCOM и Win32 поставила под вопрос кроссплатформенную парадигму языка. Впоследствии это явилось поводом для судебных исков со стороны Sun Microsystems к Microsoft. Суд принял сторону компании Sun Microsystems. В конечном счёте между двумя компаниями была достигнута договорённость о возможности продления срока официальной поддержки пользователей нестандартной Microsoft JVM до конца 2007 года&#91;56&#93;.\nВ 2005 году компанией Microsoft для платформы .NET был представлен Java-подобный язык J#, не соответствующий официальной спецификации языка Java и исключённый впоследствии из стандартного инструментария разработчика Microsoft Visual Studio, начиная с Visual Studio 2008&#91;57&#93;.\n\nJava и Android\nОсновная статья: Android\nЯзык Java активно используется для создания мобильных приложений под операционную систему Android. При этом программы компилируются в нестандартный байт-код, для использования их виртуальной машиной Dalvik (начиная с Android 5.0 Lollipop виртуальная машина заменена на ART). Для такой компиляции используется дополнительный инструмент, а именно Android SDK (Software Development Kit), разработанный компанией Google.\nРазработку приложений можно вести в среде Android Studio, NetBeans, в среде Eclipse, используя при этом плагин Android Development Tools (ADT), или в IntelliJ IDEA. Версия JDK при этом должна быть 5.0 или выше.\n8 декабря 2014 года Android Studio признана компанией Google официальной средой разработки под ОС Android.\n\nПрименения платформы Java\nСледующие успешные проекты реализованы с привлечением Java (J2EE) технологий: RuneScape, Amazon&#91;58&#93;&#91;59&#93;, eBay&#91;60&#93;&#91;61&#93;, LinkedIn&#91;62&#93;, Yahoo!&#91;63&#93;.\nСледующие компании в основном фокусируются на Java (J2EE) технологиях: SAP, IBM, Oracle. В частности, СУБД Oracle Database включает JVM как свою составную часть, обеспечивающую возможность непосредственного программирования СУБД на языке Java, включая, например, хранимые процедуры&#91;64&#93;.\n\nПроизводительность\nПрограммы, написанные на Java, имеют репутацию более медленных и занимающих больше оперативной памяти, чем написанные на языке C&#91;5&#93;. Тем не менее, скорость выполнения программ, написанных на языке Java, была существенно улучшена с выпуском в 1997—1998 годах так называемого JIT-компилятора в версии 1.1 в дополнение к другим особенностям языка для поддержки лучшего анализа кода (такие, как внутренние классы, класс StringBuffer&#91;док. 5&#93;, упрощённые логические вычисления и&#160;так&#160;далее). Кроме того, была произведена оптимизация виртуальной машины Java&#160;— с 2000 года для этого используется виртуальная машина HotSpot. По состоянию на февраль 2012 года, код Java 7 приблизительно в 1,8 раза медленнее кода, написанного на языке Си&#91;65&#93;.\nНекоторые платформы предлагают аппаратную поддержку выполнения для Java&#91;66&#93;. К примеру, микроконтроллеры, выполняющие код Java на аппаратном обеспечении вместо программной JVM, а также основанные на ARM процессоры, которые поддерживают выполнение байткода Java через опцию Jazelle.\n\nОсновные возможности\nАвтоматическое управление памятью.\nРасширенные возможности обработки исключительных ситуаций.\nБогатый набор средств фильтрации ввода-вывода.\nНабор стандартных коллекций: массив, список, стек и&#160;т.&#160;п.\nНаличие простых средств создания сетевых приложений (в том числе с использованием протокола RMI).\nНаличие классов, позволяющих выполнять HTTP-запросы и обрабатывать ответы.\nВстроенные в язык средства создания многопоточных приложений, которые потом были портированы на многие языки (например Python).\nУнифицированный доступ к базам данных:\nна уровне отдельных SQL-запросов&#160;— на основе JDBC, SQLJ;\nна уровне концепции объектов, обладающих способностью к хранению в базе данных&#160;— на основе Java Data Objects (англ.) и Java Persistence API.\nПоддержка обобщений (начиная с версии 1.5).\nПоддержка лямбд, замыканий, встроенные возможности функционального программирования (с 1.8).\nОсновные идеи\nПримитивные типы\nВ языке Java только 8 примитивных (скалярных, простых) типов: boolean, byte, char, short, int, long, float, double. Существует также вспомогательный девятый примитивный тип&#160;— void, однако переменные и поля такого типа не могут быть объявлены в коде, а сам тип используется только для описания соответствующего ему класса, для использования при рефлексии: например, с помощью класса Void&#91;док. 6&#93; можно узнать, является ли определённый метод типа void: Hello.class.getMethod(\"main\", String[].class).getReturnType() == Void.TYPE.\nДлины и диапазоны значений примитивных типов определяются стандартом, а не реализацией, и приведены в таблице. Тип char сделали двухбайтовым для удобства локализации (один из идеологических принципов Java): когда складывался стандарт, уже существовал Unicode-16, но не Unicode-32. Поскольку в результате не осталось однобайтового типа, добавили новый тип byte, причём в Java, в отличие от других языков, он не является беззнаковым. Типы float и double могут иметь специальные значения \n  \n    \n      \n        +\n        &#x221E;\n      \n    \n    {\\displaystyle +\\infty }\n  \n, \n  \n    \n      \n        &#x2212;\n        &#x221E;\n      \n    \n    {\\displaystyle -\\infty }\n  \n и «не число» (NaN). Для типа double они обозначаются Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN; для типа float&#160;— так же, но с приставкой Float вместо Double. Минимальные и максимальные значения, принимаемые типами float и double, тоже стандартизованы.\n\n\n\nТип\n\nДлина (в байтах)\nДиапазон или набор значений\n\n\nboolean\n1 в массивах, 4 в переменных&#91;67&#93;\ntrue, false\n\n\nbyte\n1\n−128..127\n\n\nchar\n2\n0..216−1, или 0..65535\n\n\nshort\n2\n−215..215−1, или −32768..32767\n\n\nint\n4\n−231..231−1, или −2147483648..2147483647\n\n\nlong\n8\n−263..263−1, или примерно −9.2·1018..9.2·1018\n\n\n\nfloat\n4\n-(2-2−23)·2127..(2-2−23)·2127, или примерно −3.4·1038..3.4·1038, а также \n  \n    \n      \n        &#x2212;\n        &#x221E;\n      \n    \n    {\\displaystyle -\\infty }\n  \n, \n  \n    \n      \n        &#x221E;\n      \n    \n    {\\displaystyle \\infty }\n  \n, NaN\n\n\ndouble\n8\n-(2-2−52)·21023..(2-2−52)·21023, или примерно −1.8·10308..1.8·10308, а также \n  \n    \n      \n        &#x2212;\n        &#x221E;\n      \n    \n    {\\displaystyle -\\infty }\n  \n, \n  \n    \n      \n        &#x221E;\n      \n    \n    {\\displaystyle \\infty }\n  \n, NaN\n\nТакая жёсткая стандартизация была необходима, чтобы сделать язык платформенно-независимым, что является одним из идеологических требований к Java. Тем не менее, одна небольшая проблема с платформенной независимостью всё же осталась. Некоторые процессоры используют для промежуточного хранения результатов 10-байтовые регистры или другими способами улучшают точность вычислений. Для того, чтобы сделать Java максимально совместимой между разными системами, в ранних версиях любые способы повышения точности вычислений были запрещены. Однако это приводило к снижению быстродействия. Выяснилось, что ухудшение точности ради платформенной независимости мало кому нужно, тем более если за это приходится платить замедлением работы программ. После многочисленных протестов этот запрет отменили, но добавили ключевое слово strictfp, запрещающее повышение точности.\n\nПреобразования при математических операциях\nВ языке Java действуют следующие правила:\n\nЕсли один операнд имеет тип double, другой тоже преобразуется к типу double.\nИначе, если один операнд имеет тип float, другой тоже преобразуется к типу float.\nИначе, если один операнд имеет тип long, другой тоже преобразуется к типу long.\nИначе оба операнда преобразуются к типу int.\nДанный способ неявного преобразования встроенных типов полностью совпадает с преобразованием типов в Си/C++&#91;68&#93;.\n\nОбъектные переменные, объекты, ссылки и указатели\nВ языке Java имеются только динамически создаваемые объекты. Переменные объектного типа и объекты в Java&#160;— совершенно разные сущности. Переменные объектного типа являются ссылками, то есть аналогами указателей на динамически создаваемые объекты. Это подчёркивается синтаксисом описания переменных. Так, код на C++ может выглядеть следующим образом:\n\ndouble a[10][20];\nFoo b(30);\n\nНо то же самое на Java будет выглядеть совсем по-другому:\n\ndouble[][] a = new double[10][20];\nFoo b = new Foo(30);\n\nПри присваиваниях, передаче в подпрограммы и сравнениях объектные переменные ведут себя как указатели, то есть присваиваются, копируются и сравниваются адреса объектов. А при доступе с помощью объектной переменной к полям данных или методам объекта не требуется никаких специальных операций разыменовывания&#160;— этот доступ осуществляется так, как если бы объектная переменная была самим объектом.\nОбъектными являются переменные любого типа, кроме примитивного. Явных указателей в Java нет. В отличие от указателей C, C++ и других языков программирования, ссылки в Java в высокой степени безопасны благодаря жёстким ограничениям на их использование.\n\nНельзя преобразовывать объект типа int или любого другого примитивного типа в указатель или ссылку и наоборот.\nНад ссылками запрещено выполнять операции ++, −−, +, − или любые другие арифметические операции.\nПреобразование типов между ссылками жёстко регламентировано. За исключением ссылок на массивы, разрешено преобразовывать ссылки только между наследуемым типом и его наследником, причём преобразование наследуемого типа в наследующий должно быть явно задано, а во время выполнения производится проверка его осмысленности. Преобразования ссылок на массивы разрешены лишь тогда, когда разрешены преобразования их базовых типов, а также нет конфликтов размерности.\nВ Java нет операций взятия адреса (&amp;) или взятия объекта по адресу (*). Амперсанд (&amp;) означает всего лишь «побитовое и» (двойной амперсанд&#160;— «логическое и»). Однако для булевых типов одиночный амперсанд означает «логическое и», отличающееся от двойного тем, что цепь проверок не прекращается при получении в выражении значения false&#91;69&#93;. Например, a == b &amp;&amp; foo() == bar() не повлечёт вызовов foo() и bar() в случае, если a&#160;!= b, тогда как использование &amp;&#160;— повлечёт в любом случае.\nБлагодаря таким специально введённым ограничениям в Java невозможно прямое манипулирование памятью на уровне физических адресов (хотя определено значение ссылки, не указывающей ни на что: null).\nЕсли нужен указатель на примитивный тип, используются классы-обёртки примитивных типов: Boolean, Byte, Character, Short, Integer, Long, Float, Double.\n\nДублирование ссылок и клонирование\nИз-за того, что объектные переменные являются ссылочными, при присваивании не происходит копирования объекта. Так, если написать\n\nFoo foo, bar;\n…\nbar = foo;\n\nто произойдёт копирование адреса из переменной foo в переменную bar. То есть foo и bar будут указывать на одну и ту же область памяти, то есть на один и тот же объект; попытка изменить поля объекта, на который ссылается переменная foo, будет менять объект, с которым связана переменная bar, и наоборот. Если же необходимо получить именно ещё одну копию исходного объекта, пользуются или методом (функцией-членом, в терминологии C++) clone (), создающим копию объекта, или (реже) копирующим конструктором (конструкторы в Java не могут быть виртуальными, поэтому экземпляр класса-потомка будет неправильно скопирован конструктором класса-предка; метод клонирования вызывает нужный конструктор и тем самым позволяет обойти это ограничение).\nМетод clone()&#91;док. 7&#93; требует, чтобы класс реализовывал интерфейс Cloneable&#91;док. 8&#93;. Если класс реализует интерфейс Cloneable, по умолчанию clone() копирует все поля (мелкая копия). Если требуется не копировать, а клонировать поля (а также их поля и так далее), надо переопределять метод clone(). Определение и использование метода clone() часто является нетривиальной задачей&#91;70&#93;.\n\nИнициализация переменных\nВсе переменные или требуют явного определения, или автоматически заполняются нулями (0, null, массивом нулей). Таким образом, исчезают гейзенбаги, связанные со случайным использованием неинициализированной памяти, характерные для низкоуровневых языков вроде Си.\n\nСборка мусора\nВ языке Java невозможно явное удаление объекта из памяти&#160;— вместо этого реализована сборка мусора. Традиционным приёмом, дающим сборщику мусора «намёк» на необходимость освобождения памяти, является присваивание переменной пустого значения null, что может оказаться эффективным при необходимости освободить более не требующийся объект, ссылка на который хранится в долгоживущем объекте&#91;71&#93;. Это, однако, не значит, что объект, заменённый значением null, будет непременно и немедленно удалён, но есть гарантия, что этот объект будет удалён именно в будущем. Данный приём всего лишь устраняет ссылку на объект, то есть отвязывает указатель от объекта в памяти. При этом следует учитывать, что объект не будет удалён сборщиком мусора, пока на него указывает хотя бы одна ссылка из используемых переменных или объектов. Существуют также методы для инициации принудительной сборки мусора, но не гарантируется, что они будут вызваны исполняющей средой, и их не рекомендуется использовать для обычной работы.\n\nКлассы и функции\nJava не является процедурным языком: любая функция может существовать только внутри класса. Это подчёркивает терминология языка Java, где нет понятий «функция» или «функция-член» (англ.&#160;member function), а только метод. В методы превратились и стандартные функции. Например, в Java нет функции sin(), а есть метод Math.sin() класса Math (содержащего, кроме sin(), методы cos(), exp(), sqrt(), abs() и многие другие). Конструкторы в Java не считаются методами. Деструкторов в Java не существует, а метод finalize() ни в коем случае нельзя считать аналогом деструктора.\n\nКонструкторы\nКонструктор&#160;— это специальный метод, который обязательно вызывается при создании нового объекта, то есть объект (экземпляр класса) не может быть создан без вызова конструктора класса. Не всегда удобно инициализировать все переменные класса при создании его экземпляра, поэтому переменные экземпляра часто объявляют внутри тела конструктора, а инициализируют как аргументы конструктора при создании экземпляра класса. Иногда проще, чтобы какие-то значения были бы созданы по умолчанию при создании объекта. В таком случае переменные объявляются и инициализируются внутри тела конструктора.\n\nКонструктор инициализирует объект непосредственно во время создания. Имя конструктора совпадает с именем класса, включая регистр, а по синтаксису конструктор похож на метод без возвращаемого значения.private int Cat();  // так выглядит метод по имени Cat\nCat();              // так выглядит конструктор класса Cat\nВ отличие от метода, конструктор никогда ничего не возвращает.\nКонструктор определяет действия, выполняемые при создании объекта класса, и является важной частью класса. Как правило, программисты стараются явно указать конструктор. Если явного конструктора нет, то Java автоматически создаст его (пустым) для использования по умолчанию.\n\nВ качестве примера можно рассмотреть некий класс Box, представляющий собой описание коробки. Конструктор класса просто установит начальные размеры для коробки.class Box {\n    int width; // ширина коробки\n    int height; // высота коробки\n    int depth; // глубина коробки\n\t\n    // Конструктор\n    Box(int a, int b) {\n        width = a;\n        height = b;\n        depth = 10;\n    }\n\n    // вычисляем объём коробки\n    int getVolume() {\n    \treturn width * height * depth;\n    }\n}\n\nСтатические методы и поля\nВ Java (как и в C++) используются статические поля и статические методы (англ.&#160;static method&#160;— в теории программирования их также называют методами класса), которые задаются при помощи ключевого слова static. Статические поля (переменные класса) имеют тот же смысл, что и в C++: каждое такое поле является собственностью класса, поэтому для доступа к статическим полям не требуется создавать экземпляры соответствующего класса.\nНапример, математические функции, реализованные в классе Math&#91;док. 9&#93;, представляют собой как раз статические методы данного класса. Поэтому их можно вызывать напрямую из класса, не создавая его экземпляра, например:\n\ndouble x = Math.sin(1);\n\nСоздание экземпляра статического класса запрещают с помощью приватного конструктора. Например, создание экземпляра класса Math приведёт к ошибке на этапе компиляции:\n\nMath m = new Math(); // Error: Math() has private access in java.lang.Math\ndouble x = m.sin(1); // Метода sin у объекта не существовало бы, т. к. он статичный\n\nПоскольку статические методы существуют независимо от объектов (экземпляров класса), они не имеют доступа к обычным (не статическим) полям и методам данного класса. В частности, при реализации статического метода недопустимо использовать идентификатор this.\nВозможность статического импорта позволяет вызывать статические функции и константы без указания класса. Пример без статического импорта:\n\ndouble x = Math.sin(Math.tan(Math.sqrt(y)) + Math.floor(24.5)) + Math.cos(42 * Math.PI);\n\nТот же пример, но со статическим импортом:\n\nimport static java.lang.Math.*;\n...\ndouble x = sin(tan(sqrt(y)) + floor(24.5)) + cos(42 * PI);\n\nЗавершённость (final)\nКлючевое слово final (финальный) имеет разные значения при описании поля, метода или класса.\n\nФинальное поле класса инициализируется при описании или в конструкторе класса (а статическое поле&#160;— в статическом блоке инициализации). Впоследствии его значение не может быть изменено. Если статическое поле класса или переменная проинициализированы константным выражением, они рассматриваются компилятором как именованная константа; в таком случае их значение может быть использовано в операторах switch (для констант типа int), а также для условной компиляции (для констант типа boolean) при использовании с оператором if.\nЗначения локальных переменных, а также параметров метода, помеченных ключевым словом final, не могут быть изменены после присвоения. При этом их значения могут использоваться внутри анонимных классов.\nМетод класса, отмеченный словом final, не может быть переопределён при наследовании.\nФинальный класс не может иметь наследников.\nАбстрактность\nВ Java методы, не объявленные явно как static, final или private, являются виртуальными в терминологии C++: при вызове метода, по-разному определённого в базовом и наследующем классах, всегда производится проверка времени выполнения.\nАбстрактным методом (модификатор abstract) в Java называется метод, для которого заданы параметры и тип возвращаемого значения, но не задано тело. Абстрактный метод определяется в классах-наследниках. Аналог абстрактного метода в C++&#160;— чисто виртуальная функция (pure virtual function). Для того чтобы в классе можно было описывать абстрактные методы, сам класс тоже должен быть описан как абстрактный. Объекты абстрактного класса создавать нельзя.\n\nИнтерфейсы\nВысшей степенью абстрактности в Java является интерфейс (модификатор interface). Все методы интерфейса абстрактны: описатель abstract даже не требуется. Интерфейс в Java не считается классом, хотя, по сути, является полностью абстрактным классом. Класс может наследовать/расширять (extends) другой класс или реализовывать (implements) интерфейс. Кроме того, интерфейс может наследовать/расширять другой интерфейс.\nВ Java класс не может наследовать более одного класса, зато может реализовывать несколько интерфейсов. Множественное наследование интерфейсов не запрещено, то есть один интерфейс может наследоваться от нескольких.\nИнтерфейсы можно использовать в качестве типов параметров методов. Нельзя создавать экземпляры интерфейсов.\n\nМаркерные интерфейсы\nВ Java есть интерфейсы, которые не содержат методов для реализации, а специальным образом обрабатываются JVM: Cloneable, Serializable, RandomAccess, Remote.\n\nШаблоны в Java (generics)\n\nНачиная с версии Java 5.0 в языке появился механизм обобщённого программирования&#160;— шаблоны, внешне близкие к шаблонам C++. С помощью специального синтаксиса в описании классов и методов можно указать параметры-типы, которые внутри описания могут использоваться в качестве типов полей, параметров и возвращаемых значений методов.\n\n// Объявление обобщённого класса\nclass GenericClass&lt;E&gt; {\n  E getFirst() { ... }\n  void add(E obj) { ... }\n}\n\n// Использование обобщённого класса в коде\nGenericClass&lt;String&gt; obj = new GenericClass&lt;&gt;();\nobj.add(&quot;qwerty&quot;);\nString p = obj.getFirst();\n\nДопускается обобщённое объявление классов, интерфейсов и методов. Кроме того, синтаксис поддерживает ограниченные объявления типов-параметров: указание в объявлении конструкции вида &lt;T extends A &amp; B &amp; C...&gt; требует, чтобы тип-параметр T реализовывал интерфейсы A, B, C и так далее.\nВ отличие от шаблонов C#, шаблоны Java не поддерживаются средой исполнения&#160;— компилятор просто создаёт байт-код, в котором никаких шаблонов уже нет. Реализация шаблонов в Java принципиально отличается от реализации аналогичных механизмов в C++: компилятор не порождает для каждого случая использования шаблона отдельный вариант класса или метода-шаблона, а просто создаёт одну реализацию байт-кода, содержащую необходимые проверки и преобразования типов. Это приводит к ряду ограничений использования шаблонов в программах на Java.\n\nПроверка принадлежности к классу\nВ Java можно явно проверить, к какому классу принадлежит объект. Выражение foo instanceof Foo истинно, если объект foo принадлежит классу Foo или его наследнику, или реализует интерфейс Foo (или, в общем виде, наследует класс, который реализует интерфейс, который наследует Foo).\nДалее функция getClass()&#91;док. 10&#93;, определённая для всех объектов, выдаёт объект типа Class. Для каждого класса создаётся не более одного описывающего его объекта типа Class, поэтому эти объекты можно сравнивать. Так, например, foo.getClass() == bar.getClass() будет истинно, если объекты foo и bar принадлежат к одному классу.\nКроме того, объект типа Class любого типа можно получить так: Integer.class, Object.class.\nПрямое сравнение классов не всегда является оптимальным средством проверки на принадлежность к классу. Зачастую вместо него используют функцию isAssignableFrom(). Эта функция определена у объекта типа Class и принимает объект типа Class в качестве параметра. Таким образом, вызов Foo.class.isAssignableFrom(Bar.class) вернёт true в случае, если Foo является предком класса Bar. Так как все объекты являются потомками типа Object, вызов Object.class.isAssignableFrom() всегда вернёт true.\nВ паре с упомянутыми функциями объекта типа Class используются также функции isInstance&#91;док. 11&#93; (эквивалентно instanceof), а также cast() (преобразует параметр в объект выбранного класса).\n\nОбработка ошибок\nОбработка ошибок в Java похожа на обработку ошибок в C++, за исключением необходимости в блоке finally. Данное отличие обусловлено тем, что Java не может придерживаться концепции RAII из-за наличия сборщика мусора, а автоматическое освобождение ресурсов в деструкторе может идти в непредсказуемом порядке через произвольные промежутки времени.\nОсуществляется обработка ошибок с помощью операторов try, catch и finally. Выбрасываемая ошибка описывается объектом определённого класса, реализующего интерфейс Throwable&#91;док. 12&#93; и соответствующего типу ошибки. Внутрь блока try помещается код, который может выбросить исключение, а блок catch отлавливает заданные программистом типы ошибок. При этом можно указывать более одного блока catch для обработки различных классов ошибок. Блок finally выполняется независимо от возникновения ошибки и предназначен для освобождения выделенных в ходе работы блока try ресурсов.\nНачиная с Java 7 поддерживается интерфейс AutoClosable&#91;док. 13&#93;, который позволяет реализовывать классы, автоматически освобождающие ресурсы. Объекты подобных классов требуется создавать в круглых скобках перед блоком try. Простым примером автоматического освобождения ресурсом может служить чтение содержимого файла:\n\n 1 import java.io.*;\n 2 \n 3 public class Main {\n 4     public static void main(String[] args) throws IOException {\n 5         if (args.length &lt; 2) {\n 6             System.err.println(&quot;Не указано имя файла.&quot;);\n 7             return;\n 8         }\n 9         String filename = args[1];\n10         // Открытый файл будет автоматически закрыт по ошибке\n11         try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n12             String line;\n13             for (int n = 1; (line = reader.readLine()) != null; ++n) {\n14                 System.out.println(n + &quot;: &quot; + line);\n15             }\n16         } catch (FileNotFoundException e) {\n17             System.err.println(&quot;Указанный файл не найден.&quot;);\n18         }\n19     }\n20 }\n\nJava придерживается концепции обязательного указания классов ошибок, которые может выбросить метод. Делается это с помощью ключевого слово throws после описания метода. Если в методе не указать класс исключения (или его предка), которое может быть выброшено из метода, то это вызовет ошибку компиляции. Концепция должна была позволить делать код самодокументируемым, обозначая, какие исключения может выбросить тот или иной метод, но на практике редко себя оправдывает, поскольку в силу разных обстоятельств программист может указать в качестве выбрасываемого исключения класс Exception, либо заключить проблемные части метода в блок try…catch для игнорирования отдельных ошибок, либо&#160;— в блок try…finally, скрывая все возможные ошибки. Недостатком концепции также является и то, что программист сам должен определять и прописывать исключения, которые может выбрасывать метод&#91;72&#93;.\n\nПространство имён\nОсновная статья: Пространство имён (программирование)\nИдея пространств имён воплощена в Java-пакетах.\nВнутри пакета есть два независимых пространства имен: переменные и методы.\n\nПримеры программ\nКод программы «Hello World!».\n\n1 class HelloWorld {\n2     public static void main(String[] args) {\n3         System.out.println(&quot;Hello World!&quot;);\n4     }\n5 }\n\nОбобщения:\n\nПример использования обобщений\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Sample {\n    public static void main(String[] args) {\n        // Создание объекта по шаблону.\n        List&lt;String&gt; strings = new ArrayList&lt;&gt;();\n        strings.add(&quot;Hello&quot;);\n        strings.add(&quot;world&quot;);\n        strings.add(&quot;!&quot;);\n        for (var string : strings) {\n            System.out.print(string + &quot; &quot;);\n        }\n    }\n}\n\n\nРефлексия:\n\nПример использования рефлексии\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\nclass TestClass {\n    private int value;\n    public int getValue() { return value; }\n    public void setValue(int valueIn) { this.value = valueIn; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        var testClass = new TestClass();\n\n        for (var field: testClass.getClass().getDeclaredFields()) {\n            System.out.printf(&quot;name:%s, type:%s \\n&quot;, field.getName(), field.getType().getCanonicalName());\n        }\n\n        for (var method : testClass.getClass().getDeclaredMethods()) {\n            System.out.printf(&quot;name:%s, return type:%s  \\n&quot;, method.getName(), method.getReturnType().getCanonicalName());\n        }        \n    }\n}\n\n\nАннотации:\n\nПример использования аннотаций\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface MyAnnotation {\n\n    public boolean value() default false;\n\n}\n\n@MyAnnotation(value=true)\npublic class TestClass {\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        var testClass = new TestClass();\n\n        var myAnnotation = testClass.getClass().getAnnotation(MyAnnotation.class);\n        if (myAnnotation != null) {\n            System.out.printf(&quot;value:%s \\n&quot;, myAnnotation.value());\n        }\n    }\n}\n\n\nСредства разработки ПО\nJDK&#160;— помимо набора библиотек для платформ Java SE и Java EE, содержит компилятор командной строки javac и набор утилит, также работающих в режиме командной строки.\nNetBeans IDE&#160;— свободная интегрированная среда разработки для всех платформ Java&#160;— Java ME, Java SE и Java EE. Пропагандируется Oracle, владельцем технологии Java, как базовое средство для разработки ПО на языке Java и других языках (C, C++, PHP, Fortran и др.).\nEclipse IDE&#160;— свободная интегрированная среда разработки для Java SE, Java EE и Java ME&#91;73&#93;. Пропагандируется IBM, одним из важнейших разработчиков корпоративного ПО, как базовое средство для разработки ПО на языке Java и других языках (C, C++, Ruby, Fortran и др.).\nIntelliJ IDEA&#160;— среда разработки для платформ Java SE, Java EE и Java ME. Разработчик&#160;— компания JetBrains. Распространяется в двух версиях: свободной бесплатной (Community Edition) и коммерческой проприетарной (Ultimate Edition).\nJDeveloper&#160;— среда разработки для платформ Java SE, Java EE и Java ME. Разработчик&#160;— компания Oracle.\nBlueJ&#160;— среда разработки программного обеспечения на языке Java, созданная в основном для использования в обучении, но также подходящая для разработки небольших программ.\nGeany&#160;— свободная среда разработки программного обеспечения, написанная с использованием библиотеки GTK2.\nСм. также\n.mw-parser-output .ts-Родственные_проекты{width:19em;box-sizing:border-box;margin:0 0 .5em 1em;padding:.4em;background:#f8f9fa;border:1px solid #a2a9b1;font-size:90%}.mw-parser-output .ts-Родственные_проекты-header{margin-bottom:.2em;padding:.2em .6em;font-size:110%}.mw-parser-output .ts-Родственные_проекты ul li{display:flex;padding:.2em .6em}.mw-parser-output .ts-Родственные_проекты ul li .image{min-width:24px;display:inline-block;margin-right:.4em;flex:none;vertical-align:top;text-align:center}.mw-parser-output .ts-Родственные_проекты ul li .image img{vertical-align:middle}.mw-parser-output .ts-Родственные_проекты ul li .label{align-self:center}.mw-parser-output .ts-Родственные_проекты ul li hr{width:100%;margin:0}@media(max-width:719px){.mw-parser-output .ts-Родственные_проекты{width:auto;margin-left:0;margin-right:0}}В&#160;родственных проектахЗначения в&#160;ВикисловареКниги в&#160;ВикиучебникеМедиафайлы на&#160;Викискладе\nСравнение C# и Java\nСписок Java API\nJava User Groups\nПримечания\nКомментарии\n\n\n↑ Произносится на английском как /ˈdʒɑːvə/, в русском языке встречаются транслитерации «Джава» и «Ява», правообладатели торговой марки предпочитают первую транслитерацию.\n\n\nДокументация\n\n\n↑ String\n\n↑ AutoCloseable\n\n↑ URLClassLoader\n\n↑ HttpURLConnection\n\n↑ StringBuffer\n\n↑ Void\n\n↑ clone()\n\n↑ Cloneable\n\n↑ Math\n\n↑ getClass()\n\n↑ isInstance()\n\n↑ Throwable\n\n↑ AutoCloseable\n\n\nИсточники\n\n\n↑ https://www.oracle.com/corporate/pressrelease/Java-10-032018.html\n\n↑ The 2018 Top Programming Languages&#160;(англ.), IEEE Spectrum: Technology, Engineering, and Science News.&#32;Дата обращения 19 ноября 2018.\n\n↑ TIOBE Index | TIOBE - The Software Quality Company&#160;(неопр.).&#32; www.tiobe.com.&#32;Дата обращения 19 ноября 2018.\n\n↑ Buyya.&#32;Object-oriented Programming with Java: Essentials and Applications.&#160;— Tata McGraw-Hill Education, 2009.&#160;— 678&#160;с.&#160;— ISBN 9780070669086.\n\n↑ 1 2 Java 6 -server speed ÷ C++ GNU g++ speed | Computer Language Benchmarks Game&#160;(неопр.)&#160;(недоступная ссылка).&#32;Дата обращения 4 марта 2010.&#32;Архивировано 14&#160;июня 2011&#160;года.\n\n↑ Metz, Cade.&#32;Google pits C++ against Java, Scala, and Go&#160;(англ.).&#32; The Register&#32;(3&#160;June 2011).&#32;Дата обращения 5 июня 2011.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Loop Recognition in C++/Java/Go/Scala&#160;(PDF, 0.3 МБ)\n\n↑ В Google провели сравнение производительности C++, Java, Go и Scala\n\n↑ Robert Tolksdorf.&#32;Programming languages for the Java Virtual Machine JVM&#160;(англ.).&#32; is-research GmbH.&#160;— Онлайн-каталог альтернативных языков и языковых расширений для JVM.&#32;Дата обращения 5 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ SUN SHIPS JDK 1.1 -- JAVABEANS INCLUDED&#160;(неопр.)&#32;(10&#160;февраля 2008).&#32;Дата обращения 17 ноября 2018.\n\n↑ Java 2 Software&#160;(неопр.)&#32;(19&#160;января 2004).&#32;Дата обращения 17 ноября 2018.\n\n↑ Ada 83 LRM, Sec 12.1: Generic Declarations&#160;(неопр.).&#32; archive.adaic.com.&#32;Дата обращения 17 ноября 2018.\n\n↑ Результаты тестов\n\n↑ JavaFX FAQ&#160;(неопр.).&#32; www.oracle.com.&#32;Дата обращения 17 ноября 2018.\n\n↑ Smith, Donald.&#32;The Future of JavaFX and Other Java Client Roadmap Updates.&#32;Дата обращения 17 ноября 2018.\n\n↑ план разработки для JDK7\n\n↑ План Б\n\n↑ OpenJDK: Project Coin&#160;(неопр.).&#32; openjdk.java.net.&#32;Дата обращения 17 ноября 2018.\n\n↑ Компания Oracle анонсировала выход Java Standard Edition 7&#160;(рус.)\n\n↑ Index corruption and crashes in Apache Lucene Core / Apache Solr with Java 7&#160;(англ.)\n\n↑ Акторное расширение языка Java в среде MPS.&#160;— вестник ИТМО.&#160;— Вып 6 (94)\n\n↑ What's New in JDK 8&#160;(неопр.).&#32; www.oracle.com.&#32;Дата обращения 17 ноября 2018.\n\n↑ Method References&#160;(англ.).&#32;The Java™ Tutorials.&#32; docs.oracle.com.&#32;Дата обращения 17 ноября 2018.\n\n↑ JDK 9 release delayed another four months\n\n↑ Java 9 gets a release date: July 27\n\n↑ Java 9 delayed to September 21\n\n↑ Oracle Announces Java SE 9 and Java EE 8. Press Release&#160;(англ.).&#32;Oracle&#32;(Sep 21, 2017).&#32;Дата обращения 1 августа 2018.\n\n↑ Project Jigsaw&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 24 ноября 2018.\n\n↑ JEP 102: Process API Updates&#160;(англ.).&#32;OpenJDK.\n\n↑ 1 2 JEP 110: HTTP/2 Client (Incubator)&#160;(англ.).&#32;OpenJDK.\n\n↑ JEP 11: Incubator Modules&#160;(англ.).&#32;OpenJDK.\n\n↑ JEP 254: Compact Strings&#160;(англ.).&#32;OpenJDK.\n\n↑ JEP 287: SHA-3 Hash Algorithms&#160;(англ.).&#32;OpenJDK.\n\n↑ JEP 277: Enhanced Deprecation&#160;(англ.).&#32;OpenJDK.\n\n↑ JEP 283: Enable GTK 3 on Linux&#160;(неопр.).&#32; openjdk.java.net.&#32;Дата обращения 25 ноября 2018.\n\n↑ Oracle Java SE 10 Release Arrives&#160;(англ.).&#32; ORACLE.&#32;Дата обращения 24 июня 2018.&#32;Архивировано 20&#160;марта 2018&#160;года.\n\n↑ JEP 286: Local-Variable Type Inference&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 304: Garbage Collector Interface&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 20 ноября 2018.\n\n↑ JEP 307: Parallel Full GC for G1&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 21 ноября 2018.\n\n↑ Алексей Рагозин.&#32;Safepoints in HotSpot JVM&#160;(англ.).&#32; blog.ragozin.info.&#32;Дата обращения 24 ноября 2018.\n\n↑ JEP 312: Thread-Local Handshakes&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 24 ноября 2018.\n\n↑ JEP 314: Additional Unicode Language-Tag Extensions&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 22 ноября 2018.\n\n↑ JEP 316: Heap Allocation on Alternative Memory Devices&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 24 ноября 2018.\n\n↑ JEP 317: Experimental Java-Based JIT Compiler&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 22 ноября 2018.\n\n↑ JEP 322: Time-Based Release Versioning&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 22 ноября 2018.\n\n↑ JEP 181: Nest-Based Access Control&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 318: Epsilon: A No-Op Garbage Collector (Experimental)&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 321: HTTP Client (Standard)&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 323: Local-Variable Syntax for Lambda Parameters&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 327: Unicode 10&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 332: Transport Layer Security (TLS) 1.3&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)&#160;(англ.).&#32; openjdk.java.net.&#32;Дата обращения 18 ноября 2018.\n\n↑ Delabassee, David.&#32;Opening Up Java EE - An Update.&#32;Дата обращения 25 ноября 2018.\n\n↑ And the Name Is…&#160;(англ.), Life at Eclipse&#160;(26&#160;февраля 2018).&#32;Дата обращения 25 ноября 2018.\n\n↑ JEP 320: Remove the Java EE and CORBA Modules&#160;(неопр.).&#32; openjdk.java.net.&#32;Дата обращения 25 ноября 2018.\n\n↑ 1 2 Microsoft Java Virtual Machine Support&#160;(англ.).&#32; Microsoft&#32;(12 сентября 2003).&#160;— Официальное заявление Microsoft о программе поддержки MSJVM.&#32;Дата обращения 9 октября 2010.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Visual J#&#160;(рус.).&#32; Microsoft&#32;(ноябрь 2007).&#160;— Официальная информация Microsoft об исключении J# из комплекта Visual Studio 2008.&#32;Дата обращения 10 октября 2010.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Todd Hoff.&#32;Amazon Architecture&#160;(англ.)&#32;(18 сентября 2007).&#160;— Обсуждение архитектуры Amazon с использованием Java-технологий.&#32;Дата обращения 6 июня 2009.\n\n↑ Amazon Elastic Compute Cloud (Amazon EC2)&#160;(англ.).&#32; Amazon Web Services LLC.&#160;— Описание технологии и возможностей Amazon EC2 как веб-сервиса.&#32;Дата обращения 6 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Todd Hoff.&#32;eBay Architecture&#160;(англ.)&#32;(27 мая 2008).&#160;— Обсуждение архитектуры eBay на платформе Java.&#32;Дата обращения 6 сентября 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Randy Shoup, Dan Pritchett.&#32;The eBay Architecture&#160;(англ.).&#32;SD Forum 2006.&#32;&#160;???&#32;(29 ноября 2006).&#160;— Презентация по истории развития архитектуры eBay.&#32;Дата обращения 6 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Brian Guan.&#32;The LinkedIn Blog. Blog Archive. Grails at LinkedIn&#160;(англ.).&#32; LinkedIn.com&#32;(11 июня 2008).&#160;— История создания системы LinkedIn на основе Java-технологии Grails.&#32;Дата обращения 5 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Hadoop and Distributed Computing at Yahoo!&#160;(англ.).&#32; Yahoo!.&#160;— Стартовая страница Java-технологии распределённого обслуживания Hadoop на портале разработчиков Yahoo!.&#32;Дата обращения 21 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ OracleJVM and Java Stored Procedures&#160;(англ.).&#32; Oracle Inc..&#160;— Раздел портала Oracle, посвящённый технологиям Java в составе сервера СУБД Oracle.&#32;Дата обращения 5 июня 2009.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n↑ Ubuntu: Intel® Q6600® quad-core Computer Language Benchmarks&#160;(неопр.).&#32;Архивировано 22&#160;июня 2012&#160;года.\n\n↑ Wolfgang Puffitsch, Martin Schoeberl.&#32;picoJava-II in an FPGA&#160;(англ.)&#160;// DTU Library.&#160;— 2007.\n\n↑ JVM не имеет поддержки для переменных типа boolean, поэтому они представляются в виде значений типа int. Однако массивы boolean[] поддерживаются. VM Spec The Structure of the Java Virtual Machine\n\n↑ Бьярн Страуструп.&#32;Язык программирования С++&#32;&#61;&#32;The C++ Programming Language.&#160;— М.—СПб.: Бином, Невский диалект, 2008.&#160;— 1104&#160;с.&#160;— 5000 экз.&#160;— ISBN 5-7989-0226-2; ISBN 5-7940-0064-3; ISBN 0-201-70073-5.\n\n↑ Джеймс Гослинг, Билл Джой, Гай Стил, Гилад Брача, Алекс Бакли, Даниел Смит.&#32;Java Language Specification.&#32;Chapter&#160;15.&#160;Expressions&#160;(англ.).&#32; docs.oracle.com.&#32;Дата обращения 1 декабря 2018.\n\n↑ Java API Reference.&#32;Class Object&#160;(англ.).&#32; docs.oracle.com.&#32;Дата обращения 26 ноября 2018.\n\n↑ Scott Oaks.&#32;Java Performance: The Definitive Guide: Getting the Most Out of Your Code.&#160;— \"O'Reilly Media, Inc.\", 2014-04-10.&#160;— 425&#160;с.&#160;— ISBN 9781449363543.\n\n↑ The Trouble with Checked Exceptions&#160;(неопр.).&#32; www.artima.com.&#32;Дата обращения 21 декабря 2018.\n\n↑ Pulsar - Eclipse Mobile Tools Platform&#160;(англ.).&#32; Eclipse.&#160;— Проект eclipse для мобильных разработчиков.&#32;Дата обращения 23 марта 2011.&#32;Архивировано 21&#160;августа 2011&#160;года.\n\n\nЛитература\nГерберт Шилдт.&#32;Java. Полное руководство, 10-е издание&#32;&#61;&#32;Java. The Complete Reference, 10th Edition.&#160;— М.: «Диалектика», 2018.&#160;— 1488&#160;с.&#160;— ISBN 978-5-6040043-6-4.\nКей С. Хорстманн.&#32;Java SE 9. Базовый курс&#32;&#61;&#32;Core Java SE 9 for the Impatient.&#160;— М.: «Вильямс», 2018.&#160;— 576&#160;с.&#160;— ISBN 978-5-6040043-0-2, 978-0-13-469472-6.\nКей С. Хорстманн.&#32;Java SE 8. Вводный курс&#32;&#61;&#32;Java SE 8 for the Really Impatient.&#160;— М.: «Вильямс», 2014.&#160;— 208&#160;с.&#160;— ISBN 978-5-8459-1900-7.\nФрэд Лонг, Дхрув Мохиндра, Роберт С. Сикорд, Дин Ф. Сазерленд, Дэвид Свобода.&#32;Руководство для программиста на Java: 75 рекомендаций по написанию надежных и защищённых программ&#32;&#61;&#32;Java Coding Guidelines: 75 Recommendations for Reliable and Secure Programs.&#160;— М.: «Вильямс», 2014.&#160;— 256&#160;с.&#160;— ISBN 978-5-8459-1897-0.\nКей С. Хорстманн.&#32;Java. Библиотека профессионала, том 1. Основы. 10-е издание&#32;&#61;&#32;Core Java. Volume I - Fundamentals (Tenth Edition).&#160;— М.: «Вильямс», 2017.&#160;— 864&#160;с.&#160;— ISBN 978-5-8459-2084-3.\nКей С. Хорстманн.&#32;Java. Библиотека профессионала, том 2. Расширенные средства программирования. 10-е издание&#32;&#61;&#32;Core Java. Volume II - Advanced Feature (Tenth Edition).&#160;— М.: «Вильямс», 2017.&#160;— 976&#160;с.&#160;— ISBN 978-5-9909445-0-3.\nБарри Берд.&#32;Java 9 для чайников&#32;&#61;&#32;Java For Dummies, 7th edition.&#160;— М.: «Диалектика», 2018.&#160;— 624&#160;с.&#160;— ISBN 978-5-9500296-1-5, 978-1-119-23555-2.\nКишори Шаран.&#32;Java 9. Полный обзор нововведений&#32;&#61;&#32;Java 9 Revealed.&#160;— М.: «ДМК Пресс», 2018.&#160;— 544&#160;с.&#160;— ISBN 978-5-97060-575-2.\nДжеймс Гослинг, Билл Джой, Гай Стил, Гилад Брача, Алекс Бакли.&#32;Язык программирования Java SE 8. Подробное описание, 5-е издание&#32;&#61;&#32;The Java Language Specification, Java SE 8 Edition (5th Edition) (Java Series).&#160;— М.: «Вильямс», 2015.&#160;— 672&#160;с.&#160;— ISBN 978-5-8459-1875-8.\nДжошуа Блох.&#32;Java. Эффективное программирование&#32;&#61;&#32;Effective Java.&#160;— 3-е.&#160;— М.: Диалектика, 2019.&#160;— 464&#160;с.&#160;— ISBN 978-5-6041394-4-8.\nБенджамин Дж. Эванс, Джеймс Гоф, Крис Ньюленд.&#32;Java: оптимизация программ. Практические методы повышения производительности приложений в JVM.&#160;— М.: Диалектика, 2019.&#160;— 448&#160;с.&#160;— ISBN 978-5-907114-84-5.\nМонахов Вадим.&#32;Язык программирования Java и среда NetBeans.&#160;— 3-е изд.&#160;— СПб.: БХВ-Петербург, 2011.&#160;— 704&#160;с.&#160;— ISBN 978-5-9775-0671-7.\nБрюс Эккель.&#32;Философия Java&#32;&#61;&#32;Thinking in Java.&#160;— 4-е изд.&#160;— СПб.: Питер, 2018.&#160;— 1168&#160;с.&#160;— ISBN 978-5-496-01127-3.\nСсылки\nThe Java Tutorials&#160;(англ.) — обучающие материалы по Java 8\nBruce Eckel’s Free Electronic Books&#160;(англ.)&#160;— свободно распространяемые электронные версии книг Брюса Эккеля по C++ и Java вместе с исходным кодом\nW. Kahan, Joseph D. Darcy. How Java’s Floating-Point Hurts Everyone Everywhere&#160;(англ.)\nУчебник Java 8\nJavaПлатформы\nJava Card\nJava ME\nJava SE\nJava EE\nТехнологии Sun\nJava\nJava Development Kit\nOpenJDK\nWTK\nJava Virtual Machine\nJavaFX\nJAXP\nSquawk\nОсновные сторонние технологии\nGNU Classpath\nGNU компилятор для Java\nKaffe\nTopLink\nApache Harmony\nApache Struts\nSpring Framework\nDalvik\nHibernate\nJBoss\nProcessing\nDozer\nAspectJ\nИстория\nИстория версий Java SE\nИстория версий Java EE\nКритика Java\nJava Community Process\nSun Microsystems\nСвободные реализации Java\nСвойства языка\nБайткод\nСинтаксис\nМодель памяти\nАпплеты\nСервлеты\nМидлеты\nJavaServer Pages\nWeb Start\nEnterprise JavaBeans\nСкриптовые языки\nJava Tcl\nJython\nJRuby\nBeanShell\nGroovy\nJudoscript\nSleep\nBean Scripting Framework\nYoix\nRhino\nКонференции Java\nJavaOne\nJoker\nJPoint\n\nЯзыки программированияХронология\nАда\nАссемблер\nAPL\nBASIC\nC\nC++\nC#\nD\nDelphi\nCOBOL\nErlang\nF#\nFortran\nGo\nGroovy\nHaskell\nJava\nJavaScript (JS)\nJulia\nKotlin\nLisp\nLua\nMATLAB\nObjective-C\nOCaml\nPascal\nPerl\nPL/SQL\nPHP\nPowerShell\nPython\nRuby\nRust\nScala\nUNIX Shell\nSmalltalk\nSwift\nTypeScript\nVala\nVisual Basic .NET (VB.NET)\n\n Категория\n Сравнение\n Списки: хронологический\nпо категориям\n\n\n\n\n\n"